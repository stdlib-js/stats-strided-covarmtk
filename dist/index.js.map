{
  "version": 3,
  "sources": ["../lib/accessors.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the covariance of two strided arrays provided known means and using a one-pass textbook algorithm.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {number} meanx - mean of `x`\n* @param {Object} x - first input array object\n* @param {Collection} x.data - first input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length of `x`\n* @param {NonNegativeInteger} offsetX - starting index of `x`\n* @param {number} meany - mean of `y`\n* @param {Object} y - second input array object\n* @param {Collection} y.data - second input array data\n* @param {Array<Function>} y.accessors - array element accessors\n* @param {integer} strideY - stride length of `y`\n* @param {NonNegativeInteger} offsetY - starting index of `y`\n* @returns {number} covariance\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = covarmtk( 4, 1, 1.25, arraylike2object( x ), 2, 1, 1.25, arraylike2object( x ), 2, 1 );\n* // returns 6.25\n*/\nfunction covarmtk( N, correction, meanx, x, strideX, offsetX, meany, y, strideY, offsetY ) { // eslint-disable-line max-len\n\tvar xbuf;\n\tvar ybuf;\n\tvar xget;\n\tvar yget;\n\tvar ix;\n\tvar iy;\n\tvar C;\n\tvar n;\n\tvar i;\n\n\t// Cache references to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache references to element accessors:\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\n\tn = N - correction;\n\tix = offsetX;\n\tiy = offsetY;\n\tC = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tC += ( xget( xbuf, ix ) - meanx ) * ( yget( ybuf, iy ) - meany );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn C / n;\n}\n\n\n// EXPORTS //\n\nmodule.exports = covarmtk;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar accessors = require( './accessors.js' );\n\n\n// MAIN //\n\n/**\n* Computes the covariance of two strided arrays provided known means and using a one-pass textbook algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {number} meanx - mean of `x`\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - stride length of `x`\n* @param {NonNegativeInteger} offsetX - starting index of `x`\n* @param {number} meany - mean of `y`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - stride length of `y`\n* @param {NonNegativeInteger} offsetY - starting index of `y`\n* @returns {number} covariance\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = covarmtk( 4, 1, 1.25, x, 2, 1, 1.25, x, 2, 1 );\n* // returns 6.25\n*/\nfunction covarmtk( N, correction, meanx, x, strideX, offsetX, meany, y, strideY, offsetY ) { // eslint-disable-line max-len\n\tvar ox;\n\tvar oy;\n\tvar ix;\n\tvar iy;\n\tvar C;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\treturn accessors( N, correction, meanx, ox, strideX, offsetX, meany, oy, strideY, offsetY ); // eslint-disable-line max-len\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tC = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tC += ( x[ ix ] - meanx ) * ( y[ iy ] - meany );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn C / n;\n}\n\n\n// EXPORTS //\n\nmodule.exports = covarmtk;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the covariance of two strided arrays provided known means and using a one-pass textbook algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {number} meanx - mean of `x`\n* @param {NumericArray} x - first input array\n* @param {integer} strideX - stride length of `x`\n* @param {number} meany - mean of `y`\n* @param {NumericArray} y - second input array\n* @param {integer} strideY - stride length of `y`\n* @returns {number} covariance\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = covarmtk( x.length, 1, 1.0/3.0, x, 1, 1.0/3.0, x, 1 );\n* // returns ~4.3333\n*/\nfunction covarmtk( N, correction, meanx, x, strideX, meany, y, strideY ) {\n\treturn ndarray( N, correction, meanx, x, strideX, stride2offset( N, strideX ), meany, y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = covarmtk;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the covariance of two strided arrays provided known means and using a one-pass textbook algorithm.\n*\n* @module @stdlib/stats-strided-covarmtk\n*\n* @example\n* var covarmtk = require( '@stdlib/stats-strided-covarmtk' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = covarmtk( x.length, 1, 1.0/3.0, x, 1, 1.0/3.0, x, 1 );\n* // returns ~4.3333\n*\n* @example\n* var covarmtk = require( '@stdlib/stats-strided-covarmtk' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = covarmtk.ndarray( 4, 1, 1.25, x, 2, 1, 1.25, x, 2, 1 );\n* // returns 6.25\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAmDA,SAASC,EAAUC,EAAGC,EAAYC,EAAOC,EAAGC,EAASC,EAASC,EAAOC,EAAGC,EAASC,EAAU,CAC1F,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAcJ,IAXAR,EAAOP,EAAE,KACTQ,EAAOJ,EAAE,KAGTK,EAAOT,EAAE,UAAW,CAAE,EACtBU,EAAON,EAAE,UAAW,CAAE,EAEtBU,EAAIjB,EAAIC,EACRa,EAAKT,EACLU,EAAKN,EACLO,EAAI,EACEE,EAAI,EAAGA,EAAIlB,EAAGkB,IACnBF,IAAOJ,EAAMF,EAAMI,CAAG,EAAIZ,IAAYW,EAAMF,EAAMI,CAAG,EAAIT,GACzDQ,GAAMV,EACNW,GAAMP,EAEP,OAAOQ,EAAIC,CACZ,CAKAnB,EAAO,QAAUC,ICrFjB,IAAAoB,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,qCAAsC,EAClEC,EAAY,IA0BhB,SAASC,EAAUC,EAAGC,EAAYC,EAAOC,EAAGC,EAASC,EAASC,EAAOC,EAAGC,EAASC,EAAU,CAC1F,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAIf,EAAIC,EACHD,GAAK,GAAKe,GAAK,EACnB,MAAO,KAIR,GAFAL,EAAKb,EAAkBM,CAAE,EACzBQ,EAAKd,EAAkBU,CAAE,EACpBG,EAAG,kBAAoBC,EAAG,iBAC9B,OAAOb,EAAWE,EAAGC,EAAYC,EAAOQ,EAAIN,EAASC,EAASC,EAAOK,EAAIH,EAASC,CAAQ,EAK3F,IAHAG,EAAKP,EACLQ,EAAKJ,EACLK,EAAI,EACEE,EAAI,EAAGA,EAAIhB,EAAGgB,IACnBF,IAAOX,EAAGS,CAAG,EAAIV,IAAYK,EAAGM,CAAG,EAAIP,GACvCM,GAAMR,EACNS,GAAML,EAEP,OAAOM,EAAIC,CACZ,CAKAnB,EAAO,QAAUG,ICjFjB,IAAAkB,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IAwBd,SAASC,EAAUC,EAAGC,EAAYC,EAAOC,EAAGC,EAASC,EAAOC,EAAGC,EAAU,CACxE,OAAOT,EAASE,EAAGC,EAAYC,EAAOC,EAAGC,EAASP,EAAeG,EAAGI,CAAQ,EAAGC,EAAOC,EAAGC,EAASV,EAAeG,EAAGO,CAAQ,CAAE,CAC/H,CAKAX,EAAO,QAAUG,ICVjB,IAAIS,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtC,OAAO,QAAUD",
  "names": ["require_accessors", "__commonJSMin", "exports", "module", "covarmtk", "N", "correction", "meanx", "x", "strideX", "offsetX", "meany", "y", "strideY", "offsetY", "xbuf", "ybuf", "xget", "yget", "ix", "iy", "C", "n", "i", "require_ndarray", "__commonJSMin", "exports", "module", "arraylike2object", "accessors", "covarmtk", "N", "correction", "meanx", "x", "strideX", "offsetX", "meany", "y", "strideY", "offsetY", "ox", "oy", "ix", "iy", "C", "n", "i", "require_main", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "covarmtk", "N", "correction", "meanx", "x", "strideX", "meany", "y", "strideY", "setReadOnly", "main", "ndarray"]
}
